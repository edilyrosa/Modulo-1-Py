
# ***************Los operadores de Comparaci√≥n en Python 
# permiten "comparar dos" valores o expresiones y siempre devuelven un 
# resultado booleano (True o False). Usados para tomar decisiones en un programa, 
# por ejemplo dentro de estructuras condicionales (if, while, etc.).
print('Operadores de Comparaci√≥n: ==, !=, <, >, <=, >=')

#*************‚ÅâÔ∏è¬øC√≥mo funcionan con tipo de dato num√©ricos?
# Es intuitivo, comparan sus valores num√©ricos naturalmente.
print(4 == 4.0)  # True, porque 4 y 4.0 representan el mismo valor num√©rico
print(4 >= 4.0)  # True, porque 4 y 4.0 representan el mismo valor num√©rico
print(5 > 3)     # True
print(5 > 5.0)   # False, son iguales.
print(5 != 5.0)  # False, son iguales.

#*************‚ÅâÔ∏è¬øC√≥mo funcionan con tipo de dato Booleanos?
# Se tratan como 1 (True) y 0 (False).
print(True > False)  #* True (1 > 0)



# *************‚ÅâÔ∏è¬øC√≥mo funcionan con tipo de dato String?
# ‚úÖSe comparan lexicogr√°ficamente seg√∫n el orden Unicode de cada car√°cter.
# Python compara cadena por cadena car√°cter a car√°cter: 
# 1. Python compara cadena 
print("hola" == "hola")  # True  
print("hola" != "mundo") # True 

# 2. Python compara car√°cter a car√°cter:
# usando el valor num√©rico Unicode de cada car√°cter (obtenible con ord(caracter)).
print(ord("A")) #65
print(ord("a")) #97
print("A" < "a") #* True, porque may√∫sculas tienen "menor" c√≥digo Unicode que las min√∫sculas 
#* üëÄEntonces: Las letras may√∫sculas y min√∫sculas se diferencian porque tienen 


#‚úÖ La comparaci√≥n se realiza en orden: se compara el primer car√°cter de ambas cadenas; 
# si son iguales, se pasa al siguiente, y as√≠ sucesivamente, hasta encontrar la diferencia que 
# devuelva el booleano resultado.
print(ord("a"), ord("b"), ord("c"), ord("d")) # 97 98 99 100
print("abc" < "abd")  #* True, porque 'c' es menor que 'd'  
print("Mark" > "Jack") # True, 'M' (77) > 'J' (74)
print("Mark" == "mark") # False, may√∫sculas y min√∫sculas no son iguales


# ‚úÖPuedes usar los operadores de comparacion "entre dos cadenas".
# üö´No mezcles tipos diferentes, como str con int en comparaciones directas, porque no son compatibles, 
# si lo intentas usando operadores de orden (<, >, etc.), Python lanzar√° un TypeError. 
# Sin embargo, == y != s√≠ pueden comparar distintos tipos siempre, retornando casi siempre False 
# (excepto casos especiales).
print("3" == 3)  # False  
#! print("3" < 3)   #* TypeError: '<' not supported between instances of 'str' and 'int'

# ¬ÆÔ∏èü§ØResumen clave
# üëÄLos operadores de comparaci√≥n devuelven True o False.
# üëÄDebes comparar preferentemente valores del mismo tipo para evitar errores.
# üëÄPara cadenas, la comparaci√≥n es lexicogr√°fica, sensible a may√∫sculas y min√∫sculas.
# üëÄEn tipos num√©ricos, se comportan naturalmente seg√∫n valor.
# üëÄ== y != pueden comparar distintos tipos pero otros operadores NO.


print('"M" == 77', "M" == 77)           #*"M" == 77 False
print('ord("M") == 77', ord("M") == 77) #*ord("M") == 77 True